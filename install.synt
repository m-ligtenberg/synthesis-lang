#!/bin/bash

# Synthesis Language Installer
# Install Synthesis as a standalone language - no Rust visible to users

set -e

SYNTHESIS_VERSION="0.1.2"
INSTALL_DIR="/usr/local/bin"
SYNTHESIS_HOME="$HOME/.synthesis"

echo "🎨 Installing Synthesis Language v$SYNTHESIS_VERSION"
echo ""

# Check for required system dependencies
check_dependencies() {
    echo "🔍 Checking system dependencies..."
    
    # Check for basic tools
    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
        echo "❌ Error: curl or wget is required"
        exit 1
    fi
    
    if ! command -v tar &> /dev/null; then
        echo "❌ Error: tar is required"
        exit 1
    fi
    
    echo "✅ System dependencies OK"
}

# Detect platform
detect_platform() {
    local OS=$(uname -s)
    local ARCH=$(uname -m)
    
    case "$OS" in
        Linux*)
            case "$ARCH" in
                x86_64) PLATFORM="linux-x64" ;;
                aarch64|arm64) PLATFORM="linux-arm64" ;;
                *) echo "❌ Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            ;;
        Darwin*)
            case "$ARCH" in
                x86_64) PLATFORM="macos-x64" ;;
                arm64) PLATFORM="macos-arm64" ;;
                *) echo "❌ Unsupported architecture: $ARCH"; exit 1 ;;
            esac
            ;;
        MINGW*|MSYS*|CYGWIN*)
            PLATFORM="windows-x64"
            INSTALL_DIR="$HOME/synthesis/bin"
            ;;
        *)
            echo "❌ Unsupported operating system: $OS"
            exit 1
            ;;
    esac
    
    echo "🖥️  Detected platform: $PLATFORM"
}

# Create installation directory
setup_directories() {
    echo "📁 Setting up directories..."
    
    mkdir -p "$SYNTHESIS_HOME"/{bin,lib,examples,docs}
    mkdir -p "$INSTALL_DIR" 2>/dev/null || {
        echo "⚠️  Cannot write to $INSTALL_DIR, installing to $HOME/.synthesis/bin"
        INSTALL_DIR="$SYNTHESIS_HOME/bin"
        mkdir -p "$INSTALL_DIR"
    }
}

# Download and install Synthesis binaries
install_binaries() {
    echo "⬇️  Downloading Synthesis binaries..."
    
    local DOWNLOAD_URL="https://github.com/synthesis-lang/synthesis/releases/download/v$SYNTHESIS_VERSION/synthesis-$PLATFORM.tar.gz"
    local TEMP_DIR=$(mktemp -d)
    
    # Download
    if command -v curl &> /dev/null; then
        curl -fsSL "$DOWNLOAD_URL" -o "$TEMP_DIR/synthesis.tar.gz"
    else
        wget -q "$DOWNLOAD_URL" -O "$TEMP_DIR/synthesis.tar.gz"
    fi
    
    # Extract
    echo "📦 Extracting binaries..."
    tar -xzf "$TEMP_DIR/synthesis.tar.gz" -C "$TEMP_DIR"
    
    # Install binaries
    cp "$TEMP_DIR/synthc" "$INSTALL_DIR/synthc"           # Compiler
    cp "$TEMP_DIR/synthesis" "$INSTALL_DIR/synthesis"     # Runtime
    cp "$TEMP_DIR/syn-pkg" "$INSTALL_DIR/syn-pkg"         # Package manager
    
    # Make executable
    chmod +x "$INSTALL_DIR"/{synthc,synthesis,syn-pkg}
    
    # Copy runtime libraries
    cp -r "$TEMP_DIR/lib"/* "$SYNTHESIS_HOME/lib/"
    
    # Copy examples and docs
    cp -r "$TEMP_DIR/examples"/* "$SYNTHESIS_HOME/examples/" 2>/dev/null || true
    cp -r "$TEMP_DIR/docs"/* "$SYNTHESIS_HOME/docs/" 2>/dev/null || true
    
    # Cleanup
    rm -rf "$TEMP_DIR"
    
    echo "✅ Binaries installed"
}

# Setup PATH and environment
setup_environment() {
    echo "🔧 Setting up environment..."
    
    # Create shell configuration
    local SHELL_CONFIG=""
    if [[ -n "$BASH_VERSION" ]]; then
        SHELL_CONFIG="$HOME/.bashrc"
    elif [[ -n "$ZSH_VERSION" ]]; then
        SHELL_CONFIG="$HOME/.zshrc"
    else
        SHELL_CONFIG="$HOME/.profile"
    fi
    
    # Add to PATH if not system install
    if [[ "$INSTALL_DIR" != "/usr/local/bin" ]] && [[ "$INSTALL_DIR" != "/usr/bin" ]]; then
        if ! grep -q "SYNTHESIS_HOME" "$SHELL_CONFIG" 2>/dev/null; then
            echo "" >> "$SHELL_CONFIG"
            echo "# Synthesis Language" >> "$SHELL_CONFIG"
            echo "export SYNTHESIS_HOME=\"$SYNTHESIS_HOME\"" >> "$SHELL_CONFIG"
            echo "export PATH=\"\$SYNTHESIS_HOME/bin:\$PATH\"" >> "$SHELL_CONFIG"
            echo "✅ Added Synthesis to PATH in $SHELL_CONFIG"
        fi
    fi
    
    # Create synthesis configuration
    cat > "$SYNTHESIS_HOME/config.toml" << EOF
[synthesis]
version = "$SYNTHESIS_VERSION"
home = "$SYNTHESIS_HOME"

[compiler]
default_target = "wasm"
optimization = "basic"
debug = true

[runtime]
buffer_size = 1024
real_time = true

[paths]
library = "$SYNTHESIS_HOME/lib"
examples = "$SYNTHESIS_HOME/examples"
cache = "$SYNTHESIS_HOME/cache"
EOF
}

# Install example projects
install_examples() {
    echo "🎵 Installing example projects..."
    
    # Create basic audio visualizer example
    cat > "$SYNTHESIS_HOME/examples/audio_visualizer.syn" << 'EOF'
// Welcome to Synthesis! 🎨
// This creates a real-time audio visualizer

import Audio.{mic_input, analyze_fft}
import Graphics.{clear, plasma, flash}
import GUI.{window, slider}

loop {
    // Get audio from microphone
    audio = Audio.mic_input()
    frequencies = Audio.analyze_fft(audio, 8)
    
    // Create responsive GUI
    GUI.window("Audio Visualizer", theme: "dark") {
        sensitivity = GUI.slider("Sensitivity", 0.1, 3.0, 1.0)
        
        // Visual magic happens here
        Graphics.clear(Graphics.black)
        Graphics.plasma(
            speed: frequencies[0] * sensitivity,
            palette: Graphics.rainbow
        )
        
        // Flash on bass
        if frequencies[0] > 0.7 {
            Graphics.flash(Graphics.white, 0.2)
        }
    }
}
EOF

    # Create simple graphics demo
    cat > "$SYNTHESIS_HOME/examples/graphics_demo.syn" << 'EOF'
// Graphics playground - experiment with visual effects

import Graphics.*
import Math.{sin, cos, time}
import GUI.{window, slider, dropdown}

loop {
    GUI.window("Graphics Playground") {
        effect = GUI.dropdown("Effect", ["plasma", "starfield", "particles"], "plasma")
        speed = GUI.slider("Speed", 0.1, 5.0, 1.0)
        intensity = GUI.slider("Intensity", 0.1, 2.0, 1.0)
        
        Graphics.clear(Graphics.black)
        
        if effect == "plasma" {
            Graphics.plasma(speed * time(), Graphics.neon)
        } else if effect == "starfield" {
            Graphics.starfield(200, speed * 2.0)
        } else {
            Graphics.particles(
                count: 100,
                speed: speed,
                life: intensity
            )
        }
    }
}
EOF

    echo "✅ Example projects installed"
}

# Verify installation
verify_installation() {
    echo "🧪 Verifying installation..."
    
    # Test compiler
    if ! command -v synthc &> /dev/null; then
        echo "⚠️  synthc not found in PATH"
        echo "   Try: export PATH=\"$INSTALL_DIR:\$PATH\""
    else
        local VERSION=$(synthc --version | head -1)
        echo "✅ Compiler: $VERSION"
    fi
    
    # Test runtime
    if ! command -v synthesis &> /dev/null; then
        echo "⚠️  synthesis runtime not found in PATH"
    else
        echo "✅ Runtime: Available"
    fi
    
    # Test package manager
    if ! command -v syn-pkg &> /dev/null; then
        echo "⚠️  syn-pkg not found in PATH"
    else
        echo "✅ Package manager: Available"
    fi
}

# Main installation flow
main() {
    echo "🎨 Welcome to Synthesis Language Installation"
    echo "   The universal creative programming language"
    echo ""
    
    check_dependencies
    detect_platform
    setup_directories
    
    # For development: build from source instead of download
    if [[ -f "Cargo.toml" ]] && [[ "$1" == "--dev" ]]; then
        echo "🔧 Building from source (development mode)..."
        cargo build --release --all-targets
        cp target/release/synthc "$INSTALL_DIR/"
        cp target/release/synthesis "$INSTALL_DIR/"
        cp target/release/syn-pkg "$INSTALL_DIR/" 2>/dev/null || true
        chmod +x "$INSTALL_DIR"/{synthc,synthesis}
    else
        install_binaries
    fi
    
    setup_environment
    install_examples
    verify_installation
    
    echo ""
    echo "🎉 Synthesis Language installed successfully!"
    echo ""
    echo "Quick start:"
    echo "  1. Restart your terminal or run: source ~/.bashrc"
    echo "  2. Try: synthc $SYNTHESIS_HOME/examples/audio_visualizer.syn"
    echo "  3. Run: synthesis audio_visualizer.wasm"
    echo ""
    echo "Learn more:"
    echo "  📚 Documentation: https://synthesis-lang.org/docs"
    echo "  🎵 Examples: ls $SYNTHESIS_HOME/examples"
    echo "  💬 Community: https://synthesis-lang.org/community"
    echo ""
    echo "Happy creating! 🎨✨"
}

# Run installation
main "$@"